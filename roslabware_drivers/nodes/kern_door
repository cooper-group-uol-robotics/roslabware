#!/usr/bin/env python3

# External
import argparse
import rospy

from roslabware_drivers.kern_door import KernDoorRos

if __name__ == "__main__":
    # Get arguments needed
    parser = argparse.ArgumentParser(
        prog="Kern Top balance ROS",
        description='ROS node for a Kern Top balance')
    parser.add_argument(
        '-kd',
        '--Door_name',
        action='store',
        default='kern_door',
        nargs='?',
        const=1,
        help='Device name')
    parser.add_argument(
        '-kc',
        '--Door_connection_mode',
        action='store',
        default='serial',
        nargs='?',
        const=1,
        help='Connection mode: "tcpip", "serial" or "http"')
    parser.add_argument(
        '-kadd',
        '--Door_address',
        action='store',
        default='None',
        nargs='?',
        const=1,
        help='IP Address.')
    parser.add_argument(
        '-kp',
        '--Door_port',
        action='store',
        default='COM5',
        nargs='?',
        const=1,
        help='Serial or TCP/IP port')

    parser.add_argument(
        '-ks',
        '--Door_simulation',
        action='store',
        nargs='?',
        const=1,
        default='False',
        help='Simulation mode or not (bool)')

    args, unknown = parser.parse_known_args()

    # Initialize ROS node
    rospy.init_node("Kern_door_driver", anonymous=True)

    # Objectoriented initialization of ROS
    kern_ros = KernDoorRos(
        device_name=args.Door_name,
        connection_mode=args.Door_connection_mode,
        address=args.Door_address,
        port=args.Door_port,
        simulation=args.Door_simulation)

    rospy.loginfo("Kern door roslabware driver started")
    rospy.spin()